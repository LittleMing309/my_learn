# 函数的参数
# Python的函数除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。

# 位置参数
# 写一个计算x平方的函数：
# def power(x):
#     return x*x
# print(power(15))
# 把上面函数改成计算x的n次方的函数：
# def power(x,n):
#     s = 1
#     while n > 0:
#         n = n - 1
#         s = s * x
#     return s
# print(power(5,3))

# 默认参数
# 新的pwoer(x,n)函数定义没问题，但是久的调用代码失效了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常运行
# print(power(5))   # 报错。power（）缺少1所需的位置参数：'n'
#这个时候就可以给power函数设置默认参数了，由于我们经常计算x的平方，完全可以把第二个参数n的默认值设置为2：
# def power(x, n=2):
#     s = 1
#     while n > 0:
#         n = n-1
#         s = s* x
#     return s
#
# print(power(5,3))

# 设置默认参数时，有几点注意事项：
# 1、必选参数在前，默认参数在后，否则Python的解释器会报错，
# 2、如何设置默认参数：
#     当函数有多个参数时，把变化大的参数放在前面，变化小的参数放在后面。变化小的参数就可以作为默认参数。
# 3、定义默认参数要牢记一点，默认参数必须指向不变对象
# 默认参数最大的坑：
# def add_end(L=[]):
#     L.append('END')
#     return L
#
# print(add_end([1,2,3,4]))
# print(add_end(['x','y']))
# 没问题
# print(add_end())
# print(add_end())
# 出问题：默认参数是[],但是函数似乎每次都记住了上次添加了'END'后的list。
# 原因：Python函数定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L是一个变量，他指向对象[]，每次调用该函数，如果L的内容改变了，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了
# 要修改上面的例子，我们可以用None这个不变对象来实现：
# def add_end(L=None):
#     if L is None:
#         L = []
#     L.append('END')
#     return L
#
# print(add_end([1,2,3,4]))
# print(add_end(['x','y']))
# print(add_end())
# print(add_end())
# 为什么要创建str，None这样的不变对象呢，因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题也没有。我们在编写程序时，如果可以设计一个不变对象，就尽量设计成不变的对象。

# 可变参数
# 在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数是可变的，可以是1个、2个到任意个，甚至0个。
# 例子：给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。
# 要定义出这个函数，必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a,b,c……作为一个list或者tuple传进去，这样，函数定义如下：
def cale(number):
    sum